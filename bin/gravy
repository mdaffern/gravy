#!/usr/bin/env node

var read = require('fs').readFileSync;
var exists = require('fs').existsSync;
var yaml = require('yamljs').parse;
var program = require('commander');
var pkg = require('../package');
var join = require('path').join;
var gravy = require('..');
var grid = gravy.reporters.grid;

// Usage

program
  .usage('gravy [options]')
  .option('-u, --url <url>', 'set test url')
  .parse(process.argv);

// conf

var component;
var travis;
var npm;

try {
  component = require(path('component.json'));
  travis = yaml(read(path('.travis.yml')).toString());
  npm = require(path('package.json'));
} catch (e) {
  component = component || {};
  npm = component || {};
  travis = '';
}

// auth

var user = process.env.SAUCE_USERNAME;
var key = process.env.SAUCE_ACCESS_KEY;
if (!user || !key) error('username or access key missing');

// project name

var project = component.name
  || npm.name
  || 'test';

// start

gravy = gravy(project, user, key);

browsers().forEach(function(b){
  gravy.add(b);
});

gravy.reporter(grid());
gravy.test(program.url);

// path

function path(name){
  return join(process.cwd(), name);
}

// err

function error(err){
  console.error();
  console.error('  \033[0;31mError\033[m : ' + err);
  console.error();
  process.exit(1);
}

// get browsers or err

function browsers(){
  var env = process.env;
  var str = env.BROWSERS || env.BROWSER;
  if (str) return str.split(/ *, */);
  if (!travis) error('browsers missing use travis matrix or .BROWSERS env var');

  return []
    .concat(travis.env.global || [])
    .concat(travis.env.matrix || [])
    .filter(function(e){ return /browser=/i.test(e); })
    .map(function(str){
      var m = str.match(/['"]([^'"]+)['"]/);
      return m && m[1];
    });
}
